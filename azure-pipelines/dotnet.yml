steps:
- script: dotnet restore  /v:m /bl:"$(Build.ArtifactStagingDirectory)/build_logs/restore.binlog"
  displayName: dotnet restore
  workingDirectory: src

- script: dotnet build --no-restore -c $(BuildConfiguration) /v:m /bl:"$(Build.ArtifactStagingDirectory)/build_logs/build.binlog"
  displayName: dotnet build
  workingDirectory: src

- script: dotnet pack --no-build -c $(BuildConfiguration) /v:m /bl:"$(Build.ArtifactStagingDirectory)/build_logs/pack.binlog"
  displayName: dotnet pack
  workingDirectory: src

- task: DotNetCoreCLI@2
  displayName: dotnet test -f net472
  inputs:
    command: test
    arguments: --no-build -c $(BuildConfiguration) -f net472 --filter "TestCategory!=FailsInCloudTest" -v n /p:CollectCoverage=true
    testRunTitle: net472-$(Agent.JobName)
    workingDirectory: src
  condition: eq(variables['Agent.OS'], 'Windows_NT')

- task: DotNetCoreCLI@2
  displayName: dotnet test -f netcoreapp2.0
  inputs:
    command: test
    arguments: --no-build -c $(BuildConfiguration) -f netcoreapp2.0 --filter "TestCategory!=FailsInCloudTest" -v n /p:CollectCoverage=true
    testRunTitle: netcoreapp2.0-$(Agent.JobName)
    workingDirectory: src

- task: DotNetCoreCLI@2
  displayName: dotnet test -f netcoreapp2.1
  inputs:
    command: test
    arguments: --no-build -c $(BuildConfiguration) -f netcoreapp2.1 --filter "TestCategory!=FailsInCloudTest" -v n /p:CollectCoverage=true
    testRunTitle: netcoreapp2.1-$(Agent.JobName)
    workingDirectory: src

- task: DotNetCoreCLI@2
  displayName: dotnet test -f netcoreapp2.2
  inputs:
    command: test
    arguments: --no-build -c $(BuildConfiguration) -f netcoreapp2.2 --filter "TestCategory!=FailsInCloudTest" -v n /p:CollectCoverage=true
    testRunTitle: netcoreapp2.2-$(Agent.JobName)
    workingDirectory: src

- task: CopyFiles@1
  inputs:
    Contents: |
      bin/**/coverage.cobertura.xml
      obj/**/*.cs
    TargetFolder: $(Build.ArtifactStagingDirectory)/coverageResults
  displayName: Collecting coverage.cobertura.xml artifacts
  condition: succeededOrFailed()

- powershell: |
    Write-Host "Substituting $(System.DefaultWorkingDirectory) with {reporoot}"
    $reports = Get-ChildItem "$(Build.ArtifactStagingDirectory)/coverageResults/coverage.cobertura.xml" -Recurse
    $reports |% {
        $content = Get-Content -Path $_ |% { $_ -Replace [regex]::Escape("$(System.DefaultWorkingDirectory)"), "{reporoot}" }
        Set-Content -Path $_ -Value $content -Encoding UTF8
    }
  displayName: Preparing code coverage reports for merging on another machine

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/coverageResults
    ArtifactName: coverageResults-$(Agent.JobName)
    ArtifactType: Container
  displayName: Publish coverageResults artifacts
  condition: succeededOrFailed()

- bash: bash <(curl -s https://codecov.io/bash)
  displayName: Publish code coverage results to codecov.io
  condition: ne(variables['codecov_token'], '')

- task: CopyFiles@1
  inputs:
    Contents: |
      obj/**/project.assets.json
    TargetFolder: $(Build.ArtifactStagingDirectory)/projectAssetsJson
  displayName: Collecting project.assets.json artifacts
  condition: succeededOrFailed()

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: $(Build.ArtifactStagingDirectory)/projectAssetsJson
    ArtifactName: projectAssetsJson-$(Agent.JobName)
    ArtifactType: Container
  displayName: Publish projectAssetsJson artifacts
  condition: succeededOrFailed()
