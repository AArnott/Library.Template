parameters:
- name: windowsPool
  type: object
  default:
    vmImage: windows-2022
- name: includeMacOS
  type: boolean
- name: RunTests
  type: boolean
  default: true
- name: EnableCompliance
  type: boolean
  default: false
- name: EnableAPIScan
  type: boolean
  default: false

jobs:
- job: Windows
  pool: ${{ parameters.windowsPool }}
  timeoutInMinutes: 180 # Give plenty of time due to real signing
  variables:
  - ${{ if eq(variables['system.collectionId'], '011b8bdf-6d56-4f87-be0d-0092136884d9') }}:
    # https://dev.azure.com/devdiv/DevDiv/_wiki/wikis/DevDiv.wiki/25351/APIScan-step-by-step-guide-to-setting-up-a-Pipeline
    - group: VSCloudServices-APIScan # Expected to provide ApiScanClientId, ApiScanSecret, ApiScanTenant
  templateContext:
    outputParentDirectory: $(Build.ArtifactStagingDirectory)
    outputs:
    - output: pipelineArtifact
      displayName: √∞≈∏‚Äù¬ç Publish Guardian failures
      targetPath: $(Build.ArtifactStagingDirectory)\guardian_failures_as_suppressions
      artifactName: guardian_failures_as_suppressions
      condition: failed()
    - output: pipelineArtifact
      displayName: Publish build_logs-Windows
      targetPath: $(Build.ArtifactStagingDirectory)\build_logs-Windows
      artifactName: build_logs-Windows
    - output: pipelineArtifact
      displayName: Publish coverageResults-Windows
      targetPath: $(Build.ArtifactStagingDirectory)\coverageResults-Windows
      artifactName: coverageResults-Windows
    - output: pipelineArtifact
      displayName: Publish deployables-Windows
      targetPath: $(Build.ArtifactStagingDirectory)\deployables-Windows
      artifactName: deployables-Windows
    - output: pipelineArtifact
      displayName: Publish projectAssetsJson-Windows
      targetPath: $(Build.ArtifactStagingDirectory)\projectAssetsJson-Windows
      artifactName: projectAssetsJson-Windows
    - output: pipelineArtifact
      displayName: Publish symbols-Windows
      targetPath: $(Build.ArtifactStagingDirectory)\symbols-Windows
      artifactName: symbols-Windows
    - output: pipelineArtifact
      displayName: Publish testResults-Windows
      targetPath: $(Build.ArtifactStagingDirectory)\testResults-Windows
      artifactName: testResults-Windows
    - output: pipelineArtifact
      displayName: Publish test_symbols-Windows
      targetPath: $(Build.ArtifactStagingDirectory)\test_symbols-Windows
      artifactName: test_symbols-Windows
    - output: pipelineArtifact
      displayName: Publish Variables-Windows
      targetPath: $(Build.ArtifactStagingDirectory)\Variables-Windows
      artifactName: Variables-Windows
    - output: pipelineArtifact
      displayName: Publish VSInsertion-Windows
      targetPath: $(Build.ArtifactStagingDirectory)\VSInsertion-Windows
      artifactName: VSInsertion-Windows
  steps:
  - checkout: self
    fetchDepth: 0 # avoid shallow clone so nbgv can do its work.
    clean: true

  - ${{ if eq(variables['Build.Reason'], 'Schedule') }}:
    - template: schedule-only-steps.yml

  - template: install-dependencies.yml

  - script: dotnet nbgv cloud -ca
    displayName: ‚öô Set build number

  - ${{ if eq(variables['system.collectionId'], '011b8bdf-6d56-4f87-be0d-0092136884d9') }}:
    - template: microbuild.before.yml

  - template: dotnet.yml
    parameters:
      RunTests: ${{ parameters.RunTests }}

  - ${{ if eq(variables['system.collectionId'], '011b8bdf-6d56-4f87-be0d-0092136884d9') }}:
    - template: microbuild.after.yml
      parameters:
        EnableCompliance: ${{ parameters.EnableCompliance }}
        EnableAPIScan: ${{ parameters.EnableAPIScan }}

  - template: expand-template.yml

- job: Linux
  pool:
    name: AzurePipelines-EO
    demands:
    - ImageOverride -equals AzurePipelinesUbuntu20.04compliantGPT
    os: Linux
  templateContext:
    outputParentDirectory: $(Build.ArtifactStagingDirectory)
    outputs:
    - output: pipelineArtifact
      displayName: Publish build_logs-Linux
      targetPath: $(Build.ArtifactStagingDirectory)/build_logs-Linux
      artifactName: build_logs-Linux
    - output: pipelineArtifact
      displayName: Publish coverageResults-Linux
      targetPath: $(Build.ArtifactStagingDirectory)/coverageResults-Linux
      artifactName: coverageResults-Linux
    - output: pipelineArtifact
      displayName: Publish deployables-Linux
      targetPath: $(Build.ArtifactStagingDirectory)/deployables-Linux
      artifactName: deployables-Linux
    - output: pipelineArtifact
      displayName: Publish projectAssetsJson-Linux
      targetPath: $(Build.ArtifactStagingDirectory)/projectAssetsJson-Linux
      artifactName: projectAssetsJson-Linux
    - output: pipelineArtifact
      displayName: Publish symbols-Linux
      targetPath: $(Build.ArtifactStagingDirectory)/symbols-Linux
      artifactName: symbols-Linux
    - output: pipelineArtifact
      displayName: Publish test_symbols-Linux
      targetPath: $(Build.ArtifactStagingDirectory)/test_symbols-Linux
      artifactName: test_symbols-Linux
    - output: pipelineArtifact
      displayName: Publish testResults-Linux
      targetPath: $(Build.ArtifactStagingDirectory)/testResults-Linux
      artifactName: testResults-Linux
    - output: pipelineArtifact
      displayName: Publish Variables-Linux
      targetPath: $(Build.ArtifactStagingDirectory)/Variables-Linux
      artifactName: Variables-Linux
  steps:
  - checkout: self
    fetchDepth: 0 # avoid shallow clone so nbgv can do its work.
    clean: true
  - template: install-dependencies.yml
  - template: dotnet.yml
    parameters:
      RunTests: ${{ parameters.RunTests }}
  - script: dotnet format --verify-no-changes --no-restore
    displayName: üíÖ Verify formatted code
  - template: expand-template.yml

- job: macOS
  condition: ${{ parameters.includeMacOS }}
  pool:
    name: Azure Pipelines
    vmImage: macOS-12
    os: macOS
  templateContext:
    outputParentDirectory: $(Build.ArtifactStagingDirectory)
    outputs:
    - output: pipelineArtifact
      displayName: Publish build_logs-macOS
      targetPath: $(Build.ArtifactStagingDirectory)/build_logs-macOS
      artifactName: build_logs-macOS
    - output: pipelineArtifact
      displayName: Publish coverageResults-macOS
      targetPath: $(Build.ArtifactStagingDirectory)/coverageResults-macOS
      artifactName: coverageResults-macOS
    - output: pipelineArtifact
      displayName: Publish deployables-macOS
      targetPath: $(Build.ArtifactStagingDirectory)/deployables-macOS
      artifactName: deployables-macOS
    - output: pipelineArtifact
      displayName: Publish projectAssetsJson-macOS
      targetPath: $(Build.ArtifactStagingDirectory)/projectAssetsJson-macOS
      artifactName: projectAssetsJson-macOS
    - output: pipelineArtifact
      displayName: Publish symbols-macOS
      targetPath: $(Build.ArtifactStagingDirectory)/symbols-macOS
      artifactName: symbols-macOS
    - output: pipelineArtifact
      displayName: Publish test_symbols-macOS
      targetPath: $(Build.ArtifactStagingDirectory)/test_symbols-macOS
      artifactName: test_symbols-macOS
    - output: pipelineArtifact
      displayName: Publish testResults-macOS
      targetPath: $(Build.ArtifactStagingDirectory)/testResults-macOS
      artifactName: testResults-macOS
    - output: pipelineArtifact
      displayName: Publish Variables-macOS
      targetPath: $(Build.ArtifactStagingDirectory)/Variables-macOS
      artifactName: Variables-macOS
  steps:
  - checkout: self
    fetchDepth: 0 # avoid shallow clone so nbgv can do its work.
    clean: true
  - template: install-dependencies.yml
  - template: dotnet.yml
    parameters:
      RunTests: ${{ parameters.RunTests }}
  - template: expand-template.yml

- job: WrapUp
  dependsOn:
  - Windows
  - Linux
  - macOS
  pool: ${{ parameters.windowsPool }} # Use Windows agent because PublishSymbols task requires it (https://github.com/microsoft/azure-pipelines-tasks/issues/13821).
  condition: succeededOrFailed()
  steps:
  - checkout: self
    fetchDepth: 0 # avoid shallow clone so nbgv can do its work.
    clean: true
  - template: install-dependencies.yml
    parameters:
      initArgs: -NoRestore
  - template: publish-symbols.yml
    parameters:
      includeMacOS: ${{ parameters.includeMacOS }}
  - ${{ if parameters.RunTests }}:
    - template: publish-codecoverage.yml
      parameters:
        includeMacOS: ${{ parameters.includeMacOS }}
