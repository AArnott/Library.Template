parameters:
- name: windowsPool
  type: object
  default:
    vmImage: windows-2022
- name: linuxPool
  type: object
  default:
    vmImage: ubuntu-20.04
- name: macOSPool
  type: object
  default:
    vmImage: macOS-12
- name: includeMacOS
  type: boolean
- name: RunTests
  type: boolean
  default: true
- name: EnableCompliance
  type: boolean
  default: false
- name: EnableAPIScan
  type: boolean
  default: false
- name: artifact_names
  type: object
  default:
  - build_logs
  - coverageResults
  - deployables
  - projectAssetsJson
  - symbols
  - testResults
  - test_symbols
  - Variables

jobs:
- job: Windows
  pool: ${{ parameters.windowsPool }}
  timeoutInMinutes: 180 # Give plenty of time due to real signing
  variables:
  - ${{ if eq(variables['system.collectionId'], '011b8bdf-6d56-4f87-be0d-0092136884d9') }}:
    # https://dev.azure.com/devdiv/DevDiv/_wiki/wikis/DevDiv.wiki/25351/APIScan-step-by-step-guide-to-setting-up-a-Pipeline
    - group: VSCloudServices-APIScan # Expected to provide ApiScanClientId, ApiScanSecret, ApiScanTenant
  ${{ if eq(variables['system.collectionId'], '011b8bdf-6d56-4f87-be0d-0092136884d9') }}:
    templateContext:
      outputParentDirectory: $(Build.ArtifactStagingDirectory)
      outputs:
      - ${{ each artifact_name in parameters.artifact_names }}:
        - ${{ if or(ne(artifact_name, 'testResults'), parameters.RunTests) }}:
          - output: pipelineArtifact
            displayName: ðŸ“¢ Publish ${{ artifact_name }}-Windows
            targetPath: $(Build.ArtifactStagingDirectory)/${{ artifact_name }}-Windows
            artifactName: ${{ artifact_name }}-Windows
      - output: pipelineArtifact
        displayName: ðŸ“¢ Publish VSInsertion-Windows
        targetPath: $(Build.ArtifactStagingDirectory)/VSInsertion-Windows
        artifactName: VSInsertion-Windows
      # This is useful when false positives appear so we can copy some of the output into the suppressions file.
      - output: pipelineArtifact
        displayName: ðŸ“¢ Publish Guardian failures
        targetPath: $(Build.ArtifactStagingDirectory)/guardian_failures_as_suppressions
        artifactName: guardian_failures_as_suppressions
        condition: failed()
  steps:
  - checkout: self
    fetchDepth: 0 # avoid shallow clone so nbgv can do its work.
    clean: true

  - ${{ if eq(variables['Build.Reason'], 'Schedule') }}:
    - template: schedule-only-steps.yml

  - template: install-dependencies.yml

  - script: dotnet nbgv cloud -ca
    displayName: âš™ Set build number

  - ${{ if eq(variables['system.collectionId'], '011b8bdf-6d56-4f87-be0d-0092136884d9') }}:
    - template: microbuild.before.yml

  - template: dotnet.yml
    parameters:
      RunTests: ${{ parameters.RunTests }}

  - ${{ if eq(variables['system.collectionId'], '011b8bdf-6d56-4f87-be0d-0092136884d9') }}:
    - template: microbuild.after.yml
      parameters:
        EnableCompliance: ${{ parameters.EnableCompliance }}
        EnableAPIScan: ${{ parameters.EnableAPIScan }}

  - template: expand-template.yml

- job: Linux
  pool: ${{ parameters.linuxPool }}
  ${{ if eq(variables['system.collectionId'], '011b8bdf-6d56-4f87-be0d-0092136884d9') }}:
    templateContext:
      outputParentDirectory: $(Build.ArtifactStagingDirectory)
      outputs:
      - ${{ each artifact_name in parameters.artifact_names }}:
        - output: pipelineArtifact
          displayName: ðŸ“¢ Publish ${{ artifact_name }}-Linux
          targetPath: $(Build.ArtifactStagingDirectory)/${{ artifact_name }}-Linux
          artifactName: ${{ artifact_name }}-Linux
  steps:
  - checkout: self
    fetchDepth: 0 # avoid shallow clone so nbgv can do its work.
    clean: true
  - template: install-dependencies.yml
  - template: dotnet.yml
    parameters:
      RunTests: ${{ parameters.RunTests }}
  - script: dotnet format --verify-no-changes --no-restore
    displayName: ðŸ’… Verify formatted code
  - template: expand-template.yml

- job: macOS
  condition: ${{ parameters.includeMacOS }}
  pool: ${{ parameters.macOSPool }}
  ${{ if eq(variables['system.collectionId'], '011b8bdf-6d56-4f87-be0d-0092136884d9') }}:
    templateContext:
      outputParentDirectory: $(Build.ArtifactStagingDirectory)
      outputs:
      - ${{ each artifact_name in parameters.artifact_names }}:
        - output: pipelineArtifact
          displayName: ðŸ“¢ Publish ${{ artifact_name }}-macOS
          targetPath: $(Build.ArtifactStagingDirectory)/${{ artifact_name }}-macOS
          artifactName: ${{ artifact_name }}-macOS
  steps:
  - checkout: self
    fetchDepth: 0 # avoid shallow clone so nbgv can do its work.
    clean: true
  - template: install-dependencies.yml
  - template: dotnet.yml
    parameters:
      RunTests: ${{ parameters.RunTests }}
  - template: expand-template.yml

- job: WrapUp
  dependsOn:
  - Windows
  - Linux
  - macOS
  pool: ${{ parameters.windowsPool }} # Use Windows agent because PublishSymbols task requires it (https://github.com/microsoft/azure-pipelines-tasks/issues/13821).
  condition: succeededOrFailed()
  steps:
  - checkout: self
    fetchDepth: 0 # avoid shallow clone so nbgv can do its work.
    clean: true
  - template: install-dependencies.yml
    parameters:
      initArgs: -NoRestore
  - template: publish-symbols.yml
    parameters:
      includeMacOS: ${{ parameters.includeMacOS }}
  - ${{ if parameters.RunTests }}:
    - template: publish-codecoverage.yml
      parameters:
        includeMacOS: ${{ parameters.includeMacOS }}
